
________________________________________________________________________________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________
2.
HTML: Теги
Для определения браузером типа элемента, который нужно вывести на страницу, в HTML существуют специальные конструкции — теги. С помощью тегов можно создать параграф, заголовок, секцию текста, а также быстро менять их.

Одним из основных тегов является параграф. Он отделяет участки текста друг от друга, что позволяет пользователям комфортнее читать информацию на странице.

В HTML параграфы обозначаются специальной конструкцией <p></p> внутри которой вставляется нужный текст. Это делается между <p> и </p>. Такие теги называются парными, так как у них есть открывающая и закрывающая часть. Помимо парных тегов существуют непарные, у них нет закрывающей части, так как внутрь ничего не помещается.

<p>
  Хекслет — практические курсы по программированию.
  Мы помогаем новичкам стать профессиональными программистами,
  а опытным разработчикам получать новые знания и расти профессионально.
</p>
Таких параграфов на странице может быть несколько — это не уникальный элемент.

<p>Хекслет — практические курсы по программированию.</p>
<p>
  Мы помогаем новичкам стать профессиональными программистами,
  а опытным разработчикам получать новые знания и расти профессионально.
</p>
Забегая немного вперёд, хочется отметить, что браузеры, по умолчанию, выводят многие теги с заранее определёнными стилями. Например, параграфы имеют стандартные отступы сверху и снизу, чтобы визуально отделять их друг от друга. Прошлый пример в браузере выглядит так:
________________________________________________________________________________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________

4.
HTML: Вложенность тегов
Важной концепцией HTML является вложенность тегов.
Некоторые элементы в HTML требуют вложенности одних тегов в другие. Например, списки:

<ul>
  <li>Первый элемент списка</li>
  <li>Второй элемент списка</li>
</ul>
Первый элемент списка
Второй элемент списка

Для определения списка используется тег <ul>, который указывает, что это маркированный список. Внутри располагаются теги <li>, определяющие элементы нашего списка.

Интересно: тег, внутри которого вложены другие теги, ещё называют обёрткой или враппером/wrapper
________________________________________________________________________________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________
5.
HTML: Атрибуты HTML

Разметка примера со всплывающей подсказкой:

<p title="Всплывающая подсказка. Здесь можно указать дополнительную информацию">Наведите курсор мыши на эту строку текста.</p>

Атрибут title можно использовать не только на параграфах, а на любом элементе страницы. Такие атрибуты называются глобальными, так как не зависят от элемента. В противовес им есть атрибуты, которые уникальны для одного или нескольких тегов. Например, атрибут colspan, который указывает на объединение ячеек в таблицах. Его использование вне таблиц не имеет никакого смысла.

Атрибуты могут неявно влиять на вывод информации. Например, при использовании языка стилей CSS, встречается атрибут class, задача которого — отделить похожие элементы друг от друга с помощью значения атрибута. О работе классов вы узнаете из курса по CSS, а сейчас важно знать, что этот атрибут никак не проявляет себя при выводе информации на страницу

<p class="lead">Параграф с классом lead</p>
<p class="mega-paragraph">Параграф с классом mega-paragraph</p>
У одного тега может быть указано сразу несколько атрибутов. Тогда они записываются последовательно, при этом порядок указания не имеет значения:

<p class="text-center" title="Этот элемент имеет несколько атрибутов">Параграф с несколькими атрибутами</p>
________________________________________________________________________________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________
6.
HTML: Параграфы
Параграфы – основной способ разделять большой текст на небольшие логические блоки.
Эти блоки автоматически «отбиваются» друг от друга отступами. Такой текст намного проще читается и не пугает пользователей.

Параграфы, в основном, встречаются внутри большого текста. Например, любой урок на Хекслете или Code Basics разбит на параграфы для удобства чтения, прямо как в этом уроке.

Разбитие идёт по небольшим смысловым блокам. Так не только комфортнее читать, но и можно быстрее найти нужную информацию в большом тексте.

Параграфы создаются с помощью парного тега <p>, в тело которого помещается небольшая часть текста. Например:

<p>Первый параграф</p>
<p>Второй параграф</p>
________________________________________________________________________________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________
7.
HTML: Начертание текста

--Жирное начертание
Для выделения текста жирным используется один из двух парных тегов: <b> или <strong>:

<p>Code Basics — <b>курсы</b> по программированию.</p>
<p>HTML — <strong>язык разметки гипертекста</strong></p>

- Оба примера иллюстрируют добавление жирного начертания к участку текста. Но почему для визуально одинаковых результатов использовалось два разных тега? Дело в семантике, то есть смысловом значении. В данном случае смысловом значении тега:

<b> — простое выделение текста. Его можно использовать в любом месте для визуального выделения текста. Никакой смысловой нагрузки этот тег не несёт
<strong> — логическое выделение важного участка текста. Этот тег несёт смысловую нагрузку и размечает именно важную часть. Его не следует применять на всех участках подряд
Когда-то разработчики хотели, чтобы эти теги выглядели по разному и отличались с точки зрения поведения для браузера, но история пошла по чуть иному пути. Сейчас считается, что использование <b> избыточно и для визуального выделения нужно использовать CSS, а для важных участков <strong>

Курсивное выделение
По своему смыслу курсивное выделение очень похоже на жирное, но им выделяется не ключевая часть, а ставится акцент. Например:

<p><i>Code Basics</i> — <em>бесплатные курсы</em> по программированию</p>


В этом примере были размечены две части текста:

Тегом <i> было размечено название портала Code Basics. Тег предназначен для визуального выделение текста курсивом и не несёт смысловой нагрузки
Тегом <em> была выделена фраза «бесплатные курсы». Это логический акцент на бесплатности курсов, который был придан предложению. Курсов много, а бесплатных нет, поэтому стоит добавить акцент на эту часть предложения

Полезное
Теги для визуального выделения короче, чем для смыслового. Это поможет запомнить, когда использовать <i> и <b>, а когда <em> и <strong>

В практике вместо <i> и <b> используют стилизацию с помощью CSS

Определения
Семантика
Смысловое значение. В контексте HTML — смысловой выбор разметки для участка информации
________________________________________________________________________________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________
8.
HTML: Заголовки
Чем больше текст, тем чаще он разбивается на логические секции. Например, базовая разметка доклада, диплома или реферата состоит из трёх основных частей:

Для создания заголовков используется 6 парных тегов: <h1>, <h2>, <h3>, <h4>, <h5>, <h6>, где <h1> — заголовок первого уровня, самый важный и описывающий главную тему текста, а <h6> — заголовок самого низшего уровня.

<h1>Заголовок первого уровня</h1>
<h2>Заголовок второго уровня</h2>
<h3>Заголовок третьего уровня</h3>
<h4>Заголовок четвёртого уровня</h4>
<h5>Заголовок пятого уровня</h5>
<h6>Заголовок шестого уровня</h6>



<h1>Лучшая книга на Земле</h1>
<p>Описание книги. Благодарность моему коту и двум моим собакам. Мяу!</p>

<h2>Глава 1</h2>

<h3>Часть 1</h3>
<p>Параграф с текстом</p>
<p>Параграф с текстом</p>

<h3>Часть 2</h3>
<p>Параграф с текстом</p>
<p>Параграф с текстом</p>
<h4>Примечания</h4>
<p>Текст этого примечания написан с любовью</p>

<h3>Часть 3</h3>
<p>Параграф с текстом</p>
<p>Параграф с текстом</p>

<h2>Глава 2</h2>

Полезное
Соблюдайте последовательность заголовков. Не перескакивайте уровни

На странице, обычно, находится только один заголовок первого уровня
________________________________________________________________________________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________
9.
HTML: Списки
<ul> или <ol> для определения типа списка
<li> для создания пункта списка
Общая схема разметки выглядит следующим образом:

<тип_списка>
  <пункт_списка>Текст</пункт_списка>
</тип_списка>

-Маркированный список
Для создания маркированного списка используется тег <ul>.

Маркированные списки используются, когда информация не требует определённой последовательности. Например, список продуктов из примера выше. Не так важно, что будет куплено первым: молоко или хлеб, важно — купить все продукты.

<ul>
  <li>Молоко</li>
  <li>Хлеб</li>
  <li>Вода</li>
</ul>

Для группировки последовательной информации используются нумерованные списки, важной особенностью которых является наличие порядкового номера элемента.
Такие списки удобны, если обозначается последовательность действий, которые нужно совершить. Нумерованный список создаётся с помощью тега <ol>, внутри которого также лежат элементы в тегах <li>.

в разметке HTML выглядит следующим образом:

<ol>
  <li>Купить корм</li>
  <li>Сходить к Алексею</li>
  <li>Приготовить ужин</li>
</ol>
________________________________________________________________________________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________
10.
HTML: Вложенные списки
Вот как это выглядит в HTML:

<ul>
  <li>Сходить в магазин
    <ul>
      <li>Купить молоко</li>
      <li>Купить хлеб</li>
    </ul>
  </li>
  <li>Пройти уроки на Code Basics </li>
</ul>
Важно отметить, что вложенный список является частью пункта списка и находится внутри тега <li>:

<li>Сходить в магазин
  <ul>
    <li>Купить молоко</li>
    <li>Купить хлеб</li>
  </ul>
</li>
Такая вложенность позволяет сохранить семантику и указать, что вложенный список относится именно к пункту «Сходить в магазин», а не к какому-либо ещё.

Вы можете вкладывать списки разных видов друг в друга: маркированные в нумерованные и наоборот. Главное — следить за открытием и закрытием тегов. В случае ошибки браузер попытается самостоятельно исправить ошибку, но это может быть некорректно
________________________________________________________________________________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________
11.
HTML: Таблицы
Одна из самых привычных форм подачи информации — таблицы. Мы их встречаем везде: информация о товаре, таблица умножения, документы. Такая подача позволяет легко сравнивать между собой характеристики тех или иных товаров. При вёрстке страниц таблицы используются так же часто, хоть и имеют немного запутанную вёрстку.

Таблица — составной элемент, который формируется сразу из нескольких вложенных друг в друга тегов. Это похоже на то, как верстаются списки — имеется контейнер и внутри него специальные теги-элементы

Разметка содержит в себе несколько основных элементов:

<table> — область таблицы
<tr> — строка
<thead> — шапка таблицы
<th> — ячейка шапки
<tbody> — тело таблицы
<td> — ячейка
Любая таблица начинается с парного тега <table>

<table>
  <!-- Здесь будут данные таблицы -->
</table>
Именно внутри этого тега создаются строки и столбцы таблицы. Теперь можно создать строки и столбцы. Для этого используются теги <tr> и <td>. Создадим две строки и три ячейки в каждой строке:

<table>
  <tr> <!-- Строка -->
    <td>Шоколад «Тота»</td> <!-- Ячейка -->
    <td>100 грамм</td>
    <td>200 рублей</td>
  </tr>

  <tr> <!-- Строка -->
    <td>Шоколад «Тота TeamLead»</td> <!-- Ячейка -->
    <td>100 грамм</td>
    <td>500 рублей</td>
  </tr>
</table>
<tr> <!-- Строка -->
  <td>Шоколад «Тота TeamLead»</td> <!-- Ячейка -->
  <td>100 грамм</td>
  <td>500 рублей</td>
</tr>
Шоколад «Тота»	100 грамм	200 рублей
Важно: Количество ячеек в каждой строке должно быть одинаковым

Попробуйте вставить этот код в редактор. Заметьте, что визуально вывод будет отличаться от вывода таблицы в теории этого урока. Дело в том, что, по умолчанию, браузер не проставляет видимые границы для ячеек таблицы. Для этого необходимо использовать CSS — специальный язык стилей. С этим языком и его возможностями вы встретитесь в другом курсе.

Данные выведены, но не хватает заголовков, с помощью которых можно описать каждый столбец. Для создания заголовка таблицы используется тег <thead>, а в качестве тега ячейки <th>. В остальном структура вёрстки не меняется. Дополним таблицу заголовками:

<table>
  <thead> <!-- Шапка таблицы -->
    <tr>
      <th>Вкусняшка</th> <!-- Ячейка-заголовок -->
      <th>Вес</th>
      <th>Цена</th>
    </tr>
  </thead>

  <tr>
    <td>Шоколад «Тота»</td>
    <td>100 грамм</td>
    <td>200 рублей</td>
  </tr>

  <tr>
    <td>Шоколад «Тота TeamLead»</td>
    <td>150 грамм</td>
    <td>500 рублей</td>
  </tr>
</table>
<tr>
  <td>Шоколад «Тота»</td>
  <td>100 грамм</td>
  <td>200 рублей</td>
</tr>

<tr>
  <td>Шоколад «Тота TeamLead»</td>
  <td>150 грамм</td>
  <td>500 рублей</td>
</tr>
Вкусняшка	Вес	Цена
Последним шагом станет добавление тега <tbody>, который размечает основную часть таблицы. Часто разработчики его упускают, потому что браузеры автоматически оборачивают им группу строк, которые не обёрнуты в другие теги. Обратите внимание — тег <tbody> чаще всего только один в таблице. В больших таблицах можно использовать несколько <tbody>, чтобы отделить разные секции в таблице, но в большинстве случаев в этом нет необходимости.

<table>
  <thead>
    <tr>
      <th>Вкусняшка</th>
      <th>Вес</th>
      <th>Цена</th>
    </tr>
  </thead>

  <tbody> <!-- Тело таблицы -->
    <tr>
      <td>Шоколад «Тота»</td>
      <td>100 грамм</td>
      <td>200 рублей</td>
    </tr>

    <tr>
      <td>Шоколад «Тота TeamLead»</td>
      <td>150 грамм</td>
      <td>500 рублей</td>
    </tr>
  </tbody>
</table>
Дополнительно можно указать «подвал/footer» таблицы. В нём может находиться суммарная информация, например, стоимость всех товаров.

У таблиц можно настроить заголовок. Он нужен, если одновременно выводится несколько таблиц. Это помогает отделить их друг от друга и не запутаться в том, какая таблица что доносит. Для создания заголовка таблицы используется парный тег <caption>. Если заголовок есть, то он обязательно должен располагаться сразу после тега <table>. Добавим заголовок в таблицу:

<table>
  <caption>Ассортимент шоколада «Hexlet»</caption>
  <thead>
    <tr>
      <th>Вкусняшка</th>
      <th>Вес</th>
      <th>Цена</th>
    </tr>
  </thead>

  <tbody>
    <tr>
      <td>Шоколад «Тота»</td>
      <td>100 грамм</td>
      <td>200 рублей</td>
    </tr>

    <tr>
      <td>Шоколад «Тота TeamLead»</td>
      <td>150 грамм</td>
      <td>500 рублей</td>
    </tr>
  </tbody>
</table>
<tbody>
  <tr>
    <td>Шоколад «Тота»</td>
    <td>100 грамм</td>
    <td>200 рублей</td>
  </tr>

  <tr>
    <td>Шоколад «Тота TeamLead»</td>
    <td>150 грамм</td>
    <td>500 рублей</td>
  </tr>
</tbody>
Ассортимент шоколада «Hexlet»
Вкусняшка	Вес	Цена
Задание
Создайте таблицу из 3 строк с 2 ячейками в каждой. Первая строка содержит в себе шапку таблицы

Полезное
Количество ячеек в каждой строке таблицы должно быть одинаковым

Заголовок таблицы caption всегда располагается сразу после открытия таблицы

Браузеры автоматически добавляют тег <tbody>, если он отсутствует. В небольших таблицах его можно не указывать



________________________________________________________________________________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________
12.
HTML: Объединение ячеек внутри строк и столбцов
В таблицах часто нужно объединять строки или столбцы. Это помогает объединить различную информацию. Например, если в складской таблице нет товара, то нет смысла постоянно дублировать информацию — её можно объединить и написать, что товара нет на складе:

Товар	Цена	Количество
Чай	Нет на складе
В HTML-разметке объединить ячейки в столбцах или строках можно с помощью специальных атрибутов colspan и rowspan. Их значениями является количество ячеек справа (для colspan) или снизу (для rowspan), которые нужно объединить с текущей. Отсчёт начинается с текущей ячейки, к которой применено свойство. Например, если стоит значение colspan="2", то будет объединена текущая ячейка с соседней.

Разметка для примера выше без учёта объединения ячеек будет следующей:

<table>
  <thead>
    <tr>
      <th>Товар</th>
      <th>Цена</th>
      <th>Количество</th>
    </tr>
  </thead>

  <tbody>
    <tr>
      <td>Чай</td>
      <td>Нет на складе</td> <!-- ячейка, которую хотим объединить -->
      <td></td>
    </tr>
  </tbody>
</table>
Для того чтобы объединить ячейки, нужно сделать два действия:

В тег ячейки, которую будем объединять, добавить атрибут colspan со значением, равным количеству объединяемых ячеек справа
Удалить лишние ячейки из строки
<table>
  <thead>
    <tr>
      <th>Товар</th>
      <th>Цена</th>
      <th>Количество</th>
    </tr>
  </thead>

  <tbody>
    <tr>
      <td>Чай</td>
      <td colspan="2">Нет на складе</td>
    </tr>
  </tbody>
</table>
Для объединения ячеек по вертикали используется атрибут rowspan. Алгоритм действий повторяет аналогичный при объединении по горизонтали. Единственное отличие — удалять ячейки нужно в соседних строках:

<table>
  <thead>
    <tr>
      <th>Сотрудник</th>
      <th>Зарплата</th>
      <th>Бонусы</th>
      <th>Менеджер</th>
    </tr>
  </thead>

  <tbody>
    <tr>
      <td>Алексей Примадонин</td>
      <td>750$</td>
      <td>63$</td>
      <td rowspan="2">Кодовёнок Хекслетович</td>
    </tr>
    <tr>
      <td>Вениамин Редакторович</td>
      <td>1200$</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
В примере двое сотрудников взаимодействуют с одним менеджером. Можно указать его дважды, но нагляднее объединить ячейки по вертикали. Для этого был добавлен атрибут rowspan="2", а во второй строке удалена четвёртая ячейка, так как её место займёт ячейка выше

<tbody>
  <tr>
    <td>Алексей Примадонин</td>
    <td>750$</td>
    <td>63$</td>
    <td rowspan="2">Кодовёнок Хекслетович</td>
  </tr>
  <tr>
    <td>Вениамин Редакторович</td>
    <td>1200$</td>
    <td>0</td>
  </tr>
</tbody>
Сотрудник	Зарплата	Бонусы	Менеджер
Задание
Создайте таблицу, состоящую из двух строк и трёх столбцов. Во второй строке объедините первые две ячейки, используя атрибуты. Первая строка должна быть шапкой таблицы

Полезное
Количество ячеек в каждой строке таблицы должно быть одинаковым после объединения. Важно различать количество тегов <td> и общее количество ячеек. Например, использовав на ячейке атрибут colspan="2" вы получите две логические ячейки, только они будут объединены. По этой причине необходимо убрать одну физическую ячейку из разметки для компенсации

Если используется атрибут colspan, то из HTML нужно удалить ячейки в той же строке. Если используется атрибут rowspan, то удаляются ячейки в строках ниже




________________________________________________________________________________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________
13.
HTML: Специальные символы HTML
В тексте возможно использование специальных символов — мнемоник. Они позволяют использовать знаки, которые присутствуют в таблице символов, но отсутствуют на клавиатуре, например, математические или греческие:

ξ π ϒ
Для записи этих символов используется конструкция &название-символа; Важно соблюдать регистр букв в названии символа.

Для примера возьмём символы мастей у карт:

Символ	Код
♣	&clubs;
♠	&spades;
♥	&hearts;
♦	&diams;
Со многими из этих символов можно ознакомиться на «Википедии».

Основными типографическими мнемониками в HTML являются:

&nbsp; — неразрывный пробел. Очень важная вещь, которая позволяет не переносить строку с пробелом там, где это может испортить логическую структуру текста
&laquo; и &raquo; — традиционные «кавычки-ёлочки». Повсеместно используются в типографике
&mdash; — длинное тире
Мнемоники распространены, когда необходимо вставить теги без их обработки браузером. В таком случае можно воспользоваться мнемониками &lt; и &gt;, которые нужны для обозначения < и > соответственно:

&lt;p&gt; такая разметка не будет обработана как параграф &lt;/p&gt;
________________________________________________________________________________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________
14.
HTML: Ссылки
Для перемещения между страницами был придуман главный элемент в интернете — гиперссылки.

Гиперссылки могут ссылаться не только на другой ресурс в интернете, но и позволяют перемещаться внутри текущего документа. На данный урок вы тоже попали через гиперссылку.

Для создания ссылки используется парный тег <a> с обязательным атрибутом href который указывает адрес страницы, на которую произойдёт переход после клика.

<a href="Ссылка на документ">Текст ссылки</a>
Ссылки можно поделить на 3 типа:

Относительные. Такие ссылки ссылаются на тот же сайт, с которого и происходит переход
Абсолютные. Позволяют переходить на сторонние ресурсы в интернете
Ссылки-якоря. Используются для перемещения внутри текущего документа
Единственное различие относительных и абсолютных ссылок — формат, в котором указывается ссылка. В случае с относительными ссылками не указывается адрес самого сайта, на который будет переход, он будет совпадать с сайтом, с которого произошёл переход:

<!-- Ссылка указывает на документ внутри текущего сайта -->

<a href="/languages/html">Вернуться на выбор уроков</a>
<!-- Ссылка указывает на документ стороннего сайта.
     В данном случае на главную страницу Code Basics -->

<a href="https://code-basics.com/">Перейти на сайт Code Basics</a>
Ссылки-якоря удобны в использовании внутри объёмного документа и позволяют переместить пользователя к нужному месту. Например, если страница представляет собой доклад, то удобнее, если есть возможность быстро переместиться к любому его разделу и обратно.

Создание ссылки-якоря состоит из двух действий:

Блоку на странице, к которому мы хотим совершить переход, нужно указать уникальный идентификатор. Делается это с помощью атрибута id
Добавить тег <a>, и в атрибуте href указать ссылку вида #название-уникального-идентификатора
В качестве блока выступает тег <div>. В будущих уроках мы разберем блочные элементы подробнее.

<a href="#anchor">Переход на главу 2</a>
...
...
...
<div id="anchor">
    <h2>Глава 2</h2>
</div>
Задание
Добавьте абсолютную ссылку на сайт https://code-basics.com/



________________________________________________________________________________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________
15.

HTML: Форматированный текст
Иногда возникает потребность вставить текст, сохраняя его оригинальное форматирование. Взглянем на знаменитую «лесенку Маяковского» из стихотворения «Сергею Есенину».

    Вы ушли,
            как говорится,
                          в мир в иной.
    Пустота...
            Летите,
                  в звезды врезываясь.
    Ни тебе аванса,
                  ни пивной.
    Трезвость.
    
Владимир Маяковский считал, что именно в таком виде лучше всего оформляется ритм стиха.

Оформить такой текст с помощью спецсимволов в HTML очень сложно. Придётся «жонглировать» пробельными спецсимволами. Из-за этого такую разметку будет очень сложно поддерживать в будущем:

<p>Вы ушли,</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;как говорится,</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;в мир в иной.</p>
Для решения этой проблемы существует специальный тег <pre>, задача которого — вывести текст внутри себя с сохранением всех пробельных символов. По умолчанию тег <pre> выводит текст моноширинным шрифтом, в котором все символы имеют одинаковую ширину, в отличие от обычных шрифтов.

<pre>
Вы ушли,
        как говорится,
                      в мир в иной.
Пустота...
        Летите,
              в звезды врезываясь.
Ни тебе аванса,
              ни пивной.
Трезвость.
</pre>
Внутри тега pre можно использовать теги для оформления текста: <i>, <em>, <b>, <strong>.

Задание
Добавьте любой текст в тег <pre> и вставьте его в редактор. Попробуйте различные варианты текстов.



________________________________________________________________________________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________
16.

HTML: Вставка компьютерного кода в HTML
При ведении учебных блогов по программированию, либо при написании статей, возникает необходимость продемонстрировать код. В каждом уроке на Code Basics есть такие блоки:

<p>Здесь видно разметку</p>
Для создания блока с кодом используется тег <code>, внутри которого записывается код на любом языке программирования.

// Пример кода на JavaScript
const square = (num) => {
  return num * num;
};
Тег <code> часто используют вместе с тегом <pre>, что позволяет сохранить форматирование. Если тег <pre> не используется, то переносы строк нужно контролировать самостоятельно, например, оборачивая каждую строку в тег <p>.

Важно, что все теги внутри <code> будут обработаны браузером, по этой причине внутри используются специальные символы. Также частое решение — оборачивание названия тега в отдельный тег, например <span>:

<code>
  &lt;<span>p</span>&gt;Вставляем тег p в виде простого текста &lt;<span>/p</span>&gt;
</code>
Задание
Добавьте любой текст в тег <code> и вставьте его в редактор. Попробуйте различные варианты текстов





________________________________________________________________________________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________
17.


HTML: Изображения
Для лучшего восприятия текста на странице используют изображения. Они помогают ориентироваться в тексте, разбивать его на составные части, а также создают настроение у читателя.

Картинки на странице не существуют сами по себе. Предварительно они должны быть загружены в директорию на сервере или на специальный хостинг картинок. Для вставки картинки на страницу используется непарный тег <img>, у которого два обязательных атрибута: src и alt.

Атрибут src
В атрибуте src указывается путь к изображению. Это тоже ссылка, как и в теге <a>, только теперь не происходит перенаправление пользователя, а браузер загружает изображение по этому пути, если оно существует. Путь к картинке может быть как относительный, так и абсолютный.

<img src="/images.png">
Атрибут alt
Что делать, если картинка в данный момент недоступна? В этом случае браузеры показывают маленькую картинку, обозначающую, что изображение недоступно.

Но как пользователь поймёт, что здесь было? Может изображение критически важное для статьи, и без него теряется смысл написанного? Можно посоветовать пользователю зайти попозже, когда изображение будет доступно, а можно описать ему, что было изображено.

Для этого используется атрибут alt, значением которого является текст. Он будет показан при невозможности загрузить изображение

<img src="https://i.imgur.com/g64f8to.png" alt="Логотип Code Basics">
Помимо функции «рассказать то, что не удалось показать» атрибут alt выполняет важнейшую роль для людей, которые пользуются скринридерами — программами для чтения информации с экрана. Так как изображение невозможно прочитать, то программы читают то, что было указано в атрибуте alt

Размеры изображения
Важной составляющей при работе с изображениями являются его размеры. При скачивании картинки со стороннего ресурса и её вставки на страницу, часто возникает ситуация, что изображение очень большое, и его нужно уменьшить. Для этого существуют атрибуты width и height, которые позволяют установить ширину и высоту для картинки.

<img src="https://i.imgur.com/g64f8to.png" alt="Логотип Code Basics" width="320" height="240">
Картинка будет отображена в размере 320x240 пикселей.

Важно помнить, что использование атрибутов width и height не меняет физический размер картинки — она будет весить столько же, изменится только визуальный размер. Для оптимизации страницы подбирайте картинки нужного размера или уменьшайте их с помощью графического редактора, либо специальных сервисов. Сейчас многие пользуются мобильными телефонами и мобильным интернетом, поэтому вес страницы имеет важное значение

Задание
Вставьте в редактор картинку по адресу https://www.w3.org/2008/site/images/logo-w3c-screen-lg.png и текстом W3C для случаев, если картинка недоступна



________________________________________________________________________________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________
18.
HTML: Аудио
Ранее, для добавления аудио на HTML-страницу, необходимо было пользоваться специальными «расширениями», которые давали возможность встраивать на страницу аудио-плеер. Начиная со стандарта HTML5, данная возможность есть по умолчанию. Она реализуется с помощью тега <audio>.

Данный тег является парным и в самом простом случае выглядит так:

<audio src="путь_к_аудио-файлу" controls></audio>
Атрибут controls добавляет элементы интерфейса для плеера. Каждый браузер реализует их по-своему, и единого стандарта на этот счёт нет

Тег <source>
При добавлении аудио на HTML-страницу важно помнить, что не все браузеры поддерживают одни и те же форматы аудио. Специально для этого существует вложенный тег source, в котором указываются пути на другие форматы аудио файлов. В таком случае браузер выберет тот, который поддерживается в настоящий момент. При такой разметке указывать src у тега <audio> необязательно.

<audio controls>
  <source src="https://example.com/audio.mp3">
  <source src="https://example.com/audio.ogg">
</audio>
Задание
Добавьте аудио на страницу. Используйте следующие аудио файлы:

https://www.w3schools.com/html/horse.ogg
https://www.w3schools.com/html/horse.mp3
На всякий случай сделайте звук потише ;)

Полезное
Если используется один файл, то достаточно его указать в атрибуте src. Если файлов несколько, то используйте теги <source>




________________________________________________________________________________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________
19.
HTML: Видео
Как и с аудио, ещё недавно в HTML-разметку нельзя было «комфортно» вставить видео-файл. Начиная с HTML5 появился элемент <video>, который, как и <audio>, позволяет быстро добавить необходимое видео на страницу.

Тег <video> парный, в котором, при отсутствии вложенных тегов <source>, указывается путь к видео-файлу в атрибуте src. С помощью атрибута controls можно вывести элементы управления для проигрывателя. Визуальное оформление управляющих элементов зависит от конкретного браузера.

<video src="https://example.com/our-video.mp4" controls></video>
С помощью специальных тегов <source> возможно добавлять несколько форматов видео. Это необходимо по причине того, что каждый браузер умеет воспроизводить только определённые форматы видео. Единственный формат, который корректно обрабатывают все браузеры — mp4.

<video controls>
    <source src="https://example.com/our-video.mp4" type="video/mp4">
    <source src="https://example.com/our-video.webm" type="video/webm">
    <source src="https://example.com/our-video.ogg" type="video/ogg">
</video>
Наличие трёх форматов файлов гарантирует работоспособность видео на любых устройствах. Также обязательным является наличие атрибута type, который сообщит браузеру формат видео. Именно по этому атрибуту браузер примет решение, какой файл необходимо загрузить.

Тег <video> имеет несколько важных атрибутов:

controls — Добавляет элементы управления для видеоплеера
autoplay — Автоматическое воспроизведение после загрузки видео
width — Ширина видеоплеера
height — Высота видеоплеера
Атрибуты width и height принимают значения в пикселях, при этом указывать единицу измерения не нужно.

<video width="500" height="500" controls>
    <source src="https://example.com/our-video.mp4" type="video/mp4">
    <source src="https://example.com/our-video.webm" type="video/webm">
    <source src="https://example.com/our-video.ogg" type="video/ogg">
</video>
Задание
Добавьте видео в формате mp4 на страницу:

Ссылка на видео: https://www.w3schools.com/html/movie.mp4
У видеоплеера должны быть элементы управления
Высота плеера: 240
Ширина плеера: 320
Путь к файлу укажите в теге <video>
На всякий случай сделайте звук потише, в видео есть звук ;)

Полезное
Если используется один файл, то достаточно добавить атрибут src для тега <video>. В остальных случаях используйте теги <source>

Формат mp4 корректно обрабатывается большинством браузеров. По возможности используйте именно его




________________________________________________________________________________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________
20.
HTML: Базовая структура
Любой HTML-документ можно разбить на несколько основных составляющих:

Блок head, содержащий метаинформацию о нашем сайте. Данные из этого блока не отображаются непосредственно на странице, а служат для её описания, подключения стилей и скриптов.
Блок body является основным местом, где строится HTML-разметка. Данные в этом блоке будут обработаны и выведены в браузер.
Простейшая разметка в HTML5 выглядит следующим образом:

<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <title>Базовая разметка HTML</title>
</head>
<body>
  <h1>Code Basics</h1>
  <p>Бесплатные уроки по программированию и HTML для новичков</p>
</body>
</html>
Обратите внимание на первую строку <!DOCTYPE html>. DOCTYPE (document type) — служебная информация для браузера, где описывается стандарт HTML, который нужно обработать. Текущий стандарт HTML5 поддерживается всеми браузерами, поэтому достаточно указать в первой строке документа <!DOCTYPE html>, который говорит, что наш документ размечен по стандарту HTML5.

Далее открывается парный тег <html> с атрибутом lang="ru". Указание языка также необходимо для браузеров, особенно если сайт рассчитан на массовую аудиторию, в том числе и за рубежом.

Во избежание ошибок, обе вышеописанные конструкции, при их отсутствии, будут добавлены браузером автоматически. В некоторых ситуациях браузеры могут добавить не те строки, которые вы бы хотели, и вместо обработки страницы по стандарту HTML5 браузер будет обрабатывать всё как HTML4, что приведёт ко множеству проблем, так как старые стандарты могут не знать о существовании многих тегов, таких как <main>, <nav> и так далее

Задание
Скопируйте базовую разметку HTML из примера выше. Внутри тега <body> вставьте любую разметку. Попробуйте различные теги из тех, которые были пройдены в предыдущих курсах.



________________________________________________________________________________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________
21.
HTML: Метатеги
Метатеги — служебные теги в разметке HTML. Они предназначены для указания сведений поисковым роботам и браузерам. Взгляните на вкладку в браузере с этим уроком и вы увидите текст, с помощью которого всегда сможете найти нужную вкладку, открытую в браузере.

При выводе результатов поискового запроса (например в Google или Yandex) также показывается этот заголовок и описание.

Результат поискового запроса. Показывается заголовок и описание

При добавлении статьи с сайта на страницу в социальных сетях появляется картинка и описание.

Всё это — работа метатегов. Именно в них можно определить заголовок и описание для текущей HTML-страницы, а также картинку, которая добавится при копировании ссылки в социальных сетях.

Тег title
За заголовок во вкладке браузера отвечает парный тег <title>, внутри которого содержится название страницы.

Обычно советуют использовать заголовок от 50 до 80 символов. Такое ограничение существует из-за того, что поисковые системы не могут показать больше символов в качестве заголовка страницы в результатах поисковой выдачи. Заголовок внутри тега <title> отобразится во вкладке в браузере.

<title>Code Basics: основы программирования</title>
Тег meta
Большинство метатегов записываются с использованием непарного тега <meta>. Он принимает несколько основных атрибутов, которые помогают установить метаинформацию

Описание
Описание часто используется при добавлении ссылки на страницу в социальных сетях. Эта информация используется поисковыми системами при выводе страницы в результатах поиска.

Чтобы установить описание, используется тег <meta> с двумя атрибутами:

name="description". Атрибут name указывает на то, какой тип метаинформации описывается в теге
content. Атрибут content указывает саму информацию
<meta name="description" content="Бесплатные практические уроки по программированию для тех, кто начинает с нуля.">
Ключевые слова
В разработке для страниц часто указывают ключевые слова. Они помогают роботам корректнее собирать информацию о странице, что хорошо сказывается на продвижении сайта в интернете. Как и с описанием, для установки ключевых слов используется два атрибута. В качестве значения атрибута name используется keywords. Сами ключевые слова перечисляются через запятую

<meta name="keywords" content="программирование, курсы, HTML, CSS">
Кодировка страницы
Существует большое количество кодировок — таблиц символов, по которым происходит поиск буквы или символа. Раньше проблема кодировок стояла очень остро — почти для каждого языка использовалась уникальная кодировка, из-за чего открыть документ на другом языке было невозможно.

В текущее время есть универсальные кодировки, которые поддерживают символы самых разных языков, но считается хорошим тоном, в качестве метатега, указывать кодировку страницы.

Для этого указывается только один атрибут — charset, значением которого выступает название кодировки. В 99% случаев это UTF-8. Если вы встретитесь с другой кодировкой, то, скорее всего, об этом вам сообщат заранее

<meta charset="UTF-8">
Задание
Добавьте в редактор 3 метатега:

title
description
charset со значением UTF-8
Для title и description укажите произвольный текст


________________________________________________________________________________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________
22.
HTML: link
Почти у всех вкладок в браузере существуют маленькие иконки, которые называются фавиконки. Они, как и заголовок, позволяют быстро ориентироваться во вкладках и переходить на нужную. Их используют поисковые системы, показывая рядом с названием страницы в поиске.

Фавиконка и название страницы на вкладке

Для того, чтобы установить такую иконку на страницу, используется тег <link>, у которого указываются два атрибута:

rel для указания контента
href для указания ссылки на иконку
<link rel="icon" href="/favicon.png">
Разные устройства могут отображать иконки разных размеров и форматов, поэтому сейчас добавляется не одна, а сразу несколько иконок. У тега <link> возможно указать тип изображения и его размер. Делается это с помощью атрибутов type и sizes.

Укажем, что иконка формата png и размером 32x32

<link rel="icon" href="/favicon32.png" type="image/png" sizes="32x32">
После неё можно указать ещё несколько иконок с разными размерами:

<link rel="icon" href="/favicon64.png" type="image/png" sizes="64x64">
<link rel="icon" href="/favicon32.png" type="image/png" sizes="32x32">
<link rel="icon" href="/favicon16.png" type="image/png" sizes="16x16">
При указании размеров первым числом указывается ширина в пикселях, а вторым значением высота.

Теперь браузеры на разных устройствах смогут точнее работать с иконками и сразу загружать ту, которая им подходит.

Тег <link> позволяет добавлять не только фавиконку, но и подключать файлы стилей, шрифты, подсказывать браузерам следующую (или предыдущую) страницу статьи. Самый распространённый пример — подключение файла CSS к HTML-странице:

<link rel="stylesheet" href="style.css">
Задание
Добавьте link на фавиконку https://www.w3schools.com/favicon.ico с размером 64x64.

Полезное
Все возможности тега <link> можно посмотреть на MDN Web Docs

Как и другие метатеги, тег <link> указывается в разделе head


________________________________________________________________________________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________
23.
HTML: Viewport
Для корректного отображения разметки HTML браузеры создают специальную копию разметки и вставляют её в «виртуальное окно», которое называется viewport. Зачастую данное окно шире, чем экран текущего устройства. Это сделано для того, чтобы все элементы поместились так, как задумывалось. Данный эффект можно увидеть, если зайти на неадаптированную HTML-страницу с мобильного устройства. В таком случае появляется горизонтальная полоса прокрутки.

Впервые данный метатег появился в браузерах от компании Apple «Safari». До появления мобильных устройств браузер Safari по умолчанию считал, что все страницы в интернете имеют ширину в 980 пикселей, из-за чего на первых версиях iPod и iPhone сайты отображались не полностью, а только первые 320 пикселей по ширине.

Сейчас такая проблема решается указанием ширины сайта для устройств. Наиболее часто используют значение device-width у параметра width, которое устанавливает ширину страницы, равную ширине экрана устройства.

<head>
  <meta name="viewport" content="width=device-width">
</head>
Этим значением браузеру сообщается, что ширина страницы равна ширине устройства, с которого эта страница просматривается.

Сейчас вам может показаться это сложным, но, с изучением CSS, вы полностью поймёте смысл указания viewport. Сейчас важно знать про такой метатег и его основные варианты применения

Стоит обратить внимание, что параметры задаются внутри атрибута content, свойства в котором разделяются запятой.

Основные параметры метатега viewport
width — ширина сайта. Указывается в пикселях. Возможно использование значения device-width для установки ширины страницы равной ширине устройства.
height — высота сайта. Указывается в пикселях. Возможно использование значения device-height для установки высоты страницы равной высоте устройства.
initial-scale — начальный коэффициент масштабирования. Может принимать значение от 0.1 до 10.0. Значение единица масштабирует страницу по умолчанию.
user-scalable — указывает, может ли пользователь масштабировать страницу, то есть приближать или отдалять её. Принимает значение yes и no
Укажем viewport со следующими характеристиками:

Ширина: 980px
Масштаб: 1
Запрет управления масштабированием. То есть запретить приближать или отдалять контент с помощью жестов или «горячих клавиш»
Для этого создаём метатег и, вначале указываем ширину. Это делается с помощью значения width:

<meta name="viewport" content="width=980">
Задать изначальный масштаб поможет значение initial-scale со значением 1.0. Оно означает, что страница выведется без какого-либо искажения, с теми размерами шрифтов и других элементов, которые были установлены разработчиками.

<meta name="viewport" content="width=980, initial-scale=1.0">
Последнее — запрет на масштабирование. Для этого добавим user-scalable со значением no

<meta name="viewport" content="width=980, initial-scale=1.0, user-scalable=no">
Базовое использование метатега viewport
<meta name="viewport" content="width=device-width, initial-scale=1.0">
Задание
Добавьте метатег viewport с шириной экрана 1024, без возможности масштабирования со стороны пользователя



________________________________________________________________________________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________
24.
HTML: Блочные и строчные элементы
Познакомившись со многими HTML-элементами можно заметить, что их поведение не всегда одинаковое — некоторые элементы (параграфы, списки, <pre>, <div>, заголовки, таблицы) всегда начинаются с новой строки. Они занимают всю ширину экрана. Такие элементы называются блочными. Они являются основой вёрстки HTML, так как напрямую воздействуют на то, как будут расположены элементы рядом с ними на странице.

Помимо блочных элементов существуют строчные элементы. К ним относятся ссылки (<a>), теги начертания текста (<b>, <strong>, <i>, <em>), картинки, <span>. Они не влияют на расположение соседних элементов и предназначены для придания смысловой нагрузки. В отличие от блочных элементов, строчные занимают не всю ширину экрана, а лишь то пространство, которое им необходимо

<p>Параграф является блочным элементом.</p>
<p>Он занимает всё пространство по ширине, поэтому каждый параграф начинается с новой строки.</p>

<span>Span является строчным элементом.</span>
<span>Он занимает ширину, равную ширине своего контента, поэтому переноса строки нет</span>
Параграф является блочным элементом.

Он занимает всё пространство по ширине, поэтому каждый параграф начинается с новой строки.

Span является строчным элементом. Он занимает ширину, равную ширине своего контента, поэтому переноса строки нет
Задание
Добавьте два тега <span> с текстом внутри. Посмотрите, как они будут расположены

Полезное
Строчные элементы часто используют для стилизации. Например, тег <span> используют для оборачивания участка текста. Потом этот участок стилизуют с помощью CSS

В большинстве случаев строчные элементы можно помещать внутрь блочных, а блочные нельзя помещать внутрь строчных. Исключение — ссылки. Внутрь ссылки можно помещать блочные элементы. Такое использование разрешили в стандарте HTML5



________________________________________________________________________________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________
25.

HTML: Формы в HTML
При взаимодействии с HTML-документами одно из частых действий — ввод данных в различные поля документа. Например, ввод данных в строку поиска. Именно так вы ищете информацию с помощью поисковых систем (например, Google или Yandex): вводите запрос, он отправляется на сервер (компьютер, на котором расположен сайт), и на выходе вы получаете результат поиска.

Такое взаимодействие осуществляется с помощью форм — набора полей и кнопок действий. Важно помнить, что HTML не умеет обрабатывать данные, которые были отправлены через форму. Для взаимодействия с этими данными нужно использовать языки программирования, которые работают на сервере, например JavaScript или PHP. Основы программирования на этих языках есть в соответствующих разделах на Code Basics:

JavaScript
PHP
Детальнее эти вопросы рассмотрены в профессиях на Hexlet:

Профессия Бэкенд JavaScript (node.js)
Профессия PHP-программист
Любая форма начинается с главного тега <form>, внутри которого и будут располагаться поля для заполнения и кнопка действия.

<form>
  // Внутри формы будут поля для ввода данных и кнопка с действием (отправкой данных)
</form>
Основным атрибутом у тега <form> является action — путь к файлу, где располагается обработчик данных. Именно туда уйдут данные после отправки формы.

<form action="/search">
  // Данные, после заполнения, будут отправлены на страницу /search
</form>
Если данный атрибут не указан, данные уйдут на ту же страницу, откуда была отправлена форма.

Задание
Создайте форму, у которой файл с обработчиком данных лежит по адресу /people



________________________________________________________________________________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________
26.

HTML: Поле для ввода текста
Основной элемент форм в HTML — поле для ввода. Оно реализуется с помощью тега <input> и позволяет задать различные поля для ввода данных: текст, пароли, чекбоксы, радио кнопки, кнопки отправки, загрузка файла, ввод даты и так далее.

Начиная со стандарта HTML5 список полей пополнился множеством новых вариантов. Базовыми типами инпутов являются:

Текст
Пароли
Чекбоксы
Радио кнопки
Самый простой способ использования <input> — создание текстового поля для ввода. Именно <input> присутствует во всех полях поиска. Чтобы создать простое текстовое поле для ввода данных, необходимо внутрь формы добавить непарный тег <input> и указать у него атрибут type со значением text:

<form>
  <input type="text">
</form>
Тег label
Поле создано, но совершенно непонятно что там вводить: имя? фамилию? код от сейфа? Чтобы указать назначение поля, используется тег <label>. Это парный тег, который напоминает параграф, но относится именно к описанию поля формы.

<form>
  <label>Введите имя</label>
  <input type="text">
</form>
На самом деле недостаточно просто указать label, нужно его связать с полем формы. Это необходимо для однозначной связи, ведь полей может быть много.

Для связи label используется один из двух вариантов:

Связь по атрибуту id. Для этого у тега <input> указывается атрибут id с произвольным именем, а у <label> добавляется атрибут for с таким же именем, как и значение id у элемента input
<form>
  <label for="name">Введите имя</label>
  <input type="text" id="name">
</form>
Связь через вложенность. Вы обратили внимание, что <label> — это парный тег? Для связи можно вложить input внутрь label, тогда они автоматически свяжутся друг с другом
<form>
  <label>Введите имя
    <input type="text">
  </label>
</form>
Атрибут placeholder
Встречаются ситуации, когда для поля есть описание, но совершенно непонятно, в каком формате нужно заполнить данные. Например, вначале указать имя, а потом фамилию, или наоборот? Чтобы помочь пользователю сориентироваться используется атрибут placeholder у тега <input>. Значение этого атрибута будет выведено внутри текстового поля.

<form>
  <label for="name">Введите имя и фамилию</label>
  <input type="text" id="name" placeholder="Иван Иванов">
</form>
Введите имя и фамилию 
Иван Иванов
Другие текстовые поля
Замечали, что при вводе паролей, браузер автоматически проставляет звёздочки вместо показа символов? Этого можно добиться указав значение password для атрибута type:

<form>
  <label for="pin">Введите пинкод</label>
  <input type="password" id="pin" placeholder="1234">
</form>
Введите пинкод 
1234
В стандарте HTML5 появилось ещё несколько интересных типов для тега <input>, которые реализуют обычное текстовое поле, но имеют свою реализацию. Например:

email
number
search
tel
url
Их назначение в том, что значения автоматически проверяются браузером на корректность. Например, если ввести значение email, то браузер будет ожидать корректный шаблон для Email адреса. В противном случае он сам укажет, что значение неверное при попытке отправить форму.

Мобильные устройства также не обходят стороной эти поля. В современных версиях мобильных операционных систем клавиатура подстраивается под тип поля, которое заполняется. Если выставлен тип email, то на клавиатуру сразу будет добавлен символ @, чтобы его не приходилось искать в дополнительных символах

Задание
Создайте форму, у которой файл с обработчиком данных лежит по адресу /people. Внутри формы создайте 2 текстовых поля



________________________________________________________________________________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________
27.


HTML: Чекбокс
В интернет-магазинах, часто, поиск реализуется с помощью указания категорий, в которых хотим искать товар. Для реализации множественного выбора существуют чекбоксы (или, как их ещё называют — флажки).

Чекбоксы позволяют выбирать множество элементов из представленных:

 Хочу изучать HTML
 Хочу изучать CSS
 Хочу изучать JS
 Хочу изучать другой язык
Для создания чекбокса используются два тега:

<input> с указанием type="checkbox"
<label>, в котором будет текст, связанный с нужным нам чекбоксом
Для создания связи <label> с <input> существует два способа:

Связь по id. Для этого необходимо задать уникальный id для <input> и связать <label> с чекбоксом с помощью атрибута for
<form>
  <input id="html" type="checkbox">
  <label for="html">Хочу изучать HTML</label>
</form>
Вложить <input> внутрь тега <label>. При этом указание уникального id не требуется
<form>
  <label>
    <input type="checkbox">
    Хочу изучать HTML
  </label>
</form>
Для того, чтобы после отправки формы на сервер возможно было узнать, какие именно пункты были выбраны, используется атрибут value, внутри которого находится значение, позволяющее определить чекбокс.

Так как чекбоксов на странице может быть много, и они могут относиться к разным формам, для определения конкретной группы чекбоксов используется атрибут name. Для каждой группы чекбоксов указывается своё имя, по которому, в дальнейшем, возможно отделить группы чекбоксов при обработке на сервере.

<form>
  <label>
    <input type="checkbox" name="languages" value="HTML">
    Хочу изучать HTML
  </label>
  <br>
  <label>
    <input type="checkbox" name="languages" value="CSS">
    Хочу изучать CSS
  </label>
  <br>
  <label>
    <input type="checkbox" name="languages" value="JS">
    Хочу изучать JS
  </label>
</form>
Задание
Создайте форму, у которой файл с обработчиком данных лежит по адресу /people. Внутри формы создайте 2 чекбокса. Свяжите их вложив <input> внутри <label>. Не забудьте добавить атрибуты name и value


________________________________________________________________________________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________
28.


HTML: Радиокнопка
Представьте, что вы предлагаете пользователю выбор: доставить товар курьером или почтой. Использовать чекбоксы в этом случае не получится, ведь выбор строго один.

Для создания переключателей, которые умеют обрабатывать только один из множества вариантов, существуют радиокнопки. Название они получили от старых автомобильных радиоприёмников, в которых выбор радио осуществлялся нажатием на одну из множества кнопок для выбора частоты.

Выбор радиостанции

 87.1 FM
 95.5 FM
 101.4 FM
 103.2 FM
Для создания радиокнопки, так же, как и чекбокса, используются два тега:

<input> с указанием type="radio". Обязательным атрибутом является name, значением которого является имя. Данное имя должно быть одинаковым у всей группы радиокнопок. Без этого атрибута будет возможно выбрать все значения сразу, так как браузер не будет видеть связи между ними
<label>, в котором будет текст, связанный с нужной нам радиокнопкой
Связь <input> с <label> происходит уже по одному из двух знакомых нам сценариев:

Связь по id. Для этого необходимо задать уникальный id для <input>, и связать <label> с радиокнопкой с помощью атрибута for

<form>
  <input id="yes" type="radio" name="question">
  <label for="yes">Да</label>

  <input id="no" type="radio" name="question">
  <label for="no">Нет</label>
</form>
Вложить <input> внутрь тега <label>. При этом указание уникального id не требуется

<form>
  <label>
    <input type="radio" name="question">
    Да
  </label>
  <br>
  <label>
    <input type="radio" name="question">
    Нет
  </label>
</form>
Для того чтобы после отправки формы на сервер возможно было узнать, какой именно пункт был выбран, используется атрибут value, внутри которого находится значение, позволяющее определить радиокнопку.

<form>
  <label>
    <input type="radio" name="question" value="yes">
    Да
  </label>
  <br>
  <label>
    <input type="radio" name="question" value="no">
    Нет
  </label>
</form>
Задание
Создайте форму, у которой файл с обработчиком данных лежит по адресу /people. Внутри формы создайте 2 радиокнопки. Свяжите их вложив <input> внутри <label>. Уникальное имя для радиокнопок delivery. Не забудьте добавить атрибут value



________________________________________________________________________________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________
29.

HTML: Textarea
Часто мы хотим дать пользователю возможность набрать не одну строчку текста, а сразу несколько. Например, если пользователь хочет оставить отзыв. Для этого используется элемент <textarea>, позволяющий вводить несколько строчек текста.

Оставьте свой отзыв

<form>
  <textarea></textarea>
</form>
Заметьте, что <textarea> является парным тегом. Это означает, что вы можете вложить в него текст по умолчанию, чтобы пользователь быстрее понял, что ему необходимо ввести.

По умолчанию высота и ширина <textarea> зависит от настроек браузера. Это значит, что в разных браузерах высота и ширина может меняться. Для того, чтобы установить одинаковое значение, используются атрибуты rows и cols, означающие количество строк и столбцов соответственно.

<form>
  <textarea rows="5" cols="30">textarea с 5 строками и 30 столбцами</textarea>
</form>
textarea с 5 строками и 30 столбцами
Задание
Создайте форму, у которой файл с обработчиком данных лежит по адресу /people. Внутри формы создайте поле для многострочного ввода. Количество строк для ввода: 4. Количество столбцов: 30


________________________________________________________________________________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________
30.


HTML: Список
В различных формах пользователю часто приходится выбирать один из множества вариантов. Это могут быть категории, по которым мы хотим произвести поиск, выбор различных опций для поиска. Наиболее распространённым решением является использование выпадающих списков:

В какой категории искать?


JS
Для создания такого выпадающего списка используется тег <select> с вложенными внутри него тегами <option>. Всё это похоже на создание обычных списков, где вместо ul/ol используется <select>, а вместо <li> используется <option>.

Часто первый пункт списка используется для заголовка всего выпадающего списка. В таком случае для него используют атрибут disabled, чтобы заблокировать его для выбора.

<form>
  <select>
    <option disabled>Какой курс вы хотите пройти?</option>
    <option>JS</option>
    <option>PHP</option>
    <option>Java</option>
    <option>Racket</option>
    <option>HTML</option>
    <option>CSS</option>
  </select>
</form>

JS
Список внутри формы также может быть представлен в виде списка, в котором можно выбрать несколько элементов. Делается это с помощью зажатия кнопки ctrl и клика мышки по полям, которые мы хотим выбрать.

В какой категории искать?

JSPHPJavaRacketHTMLCSS
Для того, чтобы создать список с множественным выбором, у тега <select> добавляется атрибут multiple

<form>
  <select multiple>
    <option>JS</option>
    <option>PHP</option>
    <option>Java</option>
    <option>Racket</option>
    <option>HTML</option>
    <option>CSS</option>
  </select>
</form>
Задание
Создайте форму, у которой файл с обработчиком данных лежит по адресу /people. Внутри формы создайте выпадающий список из трёх элементов.


________________________________________________________________________________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________
31.


HTML: Отправка формы
Последним шагом в создании формы является добавление кнопки для отправки результата на сервер. Для этого, используя парный тег <button>, создадим кнопку отправки:

<form>
  <button>Отправить</button>
</form>
После нажатия на кнопку «Отправить», данные будут переданы обработчику, который указан в атрибуте action (если не указан, то данные отправятся на эту же страницу). После отправки данных страница будет перезагружена.

Теперь, используя элементы форм из прошлых уроков, создадим форму с разными полями.

<h2>Форма поиска</h2>
<form>
  <label>
    Введите ваш запрос
    <input type="search">
  </label>
  <br>
  <select>
    <option disabled>В каком разделе искать?</option>
    <option>JS</option>
    <option>HTML</option>
    <option>CSS</option>
  </select>
  <button>Искать</button>
</form>
Форма поиска

Введите ваш запрос 
 
JS
 Искать
Если вы нажмёте на кнопку «Искать», то страница перезагрузится и данные должны будут уйти в обработчик на эту же страницу. Так как обработчика нет, то никаких видимых результатов, кроме перезагрузки страницы, не произойдёт.

Задание
Создайте форму, у которой файл с обработчиком данных лежит по адресу /people. Внутри формы расположите следующие элементы:

2 текстовых поля <input>
Список с возможностью множественного выбора
Кнопку «Отправить»
________________________________________________________________________________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________
32.
HTML: Семантические элементы
При создании HTML-документа разработчики используют теги <div> и <span>. Они позволяют создать блочный или строчный элемент, что помогает создавать независимые блоки с разным оформлением. Но, для браузера и поисковых систем, эти блоки не являются семантическими, т.е. они не говорят напрямую о том, что в них лежит.

С первых версий стандарта HTML теги изначально обладают семантикой, например, <p> — параграф, <table> — таблица, <ol>, <ul> — списки. Но этими тегами не получится разметить «шапку», «подвал», «боковую панель» сайта.

До выхода стандарта HTML5 для разметки таких областей использовали классы или идентификаторы. Например так:

<div id="header">
  // Здесь будет шапка сайта. Обычно в ней располагается логотип, контактная информация, меню
</div>

<div id="main">
  // Уникальный контент сайта
</div>

<div id="footer">
  // Подвал сайта. Обычно здесь находится контактная информация, дополнительное меню, юридическая информация о компании
</div>
Это решило проблемы с точки зрения разработчиков, ведь навигация по коду стала быстрее, но, с точки зрения браузера, ситуация не изменилась. Браузеры не понимают, что id="header" используется на сайте для обозначения шапки сайта, да и разработчики именовали области по своему, так как не было единого стандарта.

С выпуском стандарта HTML5 появились новые теги, которые стали обозначать семантики областей страницы, а не только текста.

Основными семантическими тегами стали:

<article>
<aside>
<footer>
<header>
<main>
<nav>
<section>
Большинство элементов интуитивно понятны и их можно сразу использовать в своих документах. Теперь пример выше можно переделать с использованием новых элементов HTML:

<header>
  // Здесь будет шапка сайта. Обычно в ней располагается логотип, контактная информация, меню
</header>

<main>
  // Уникальный контент сайта
</main>

<footer>
  // Подвал сайта. Обычно здесь находится контактная информация, дополнительное меню, юридическая информация о компании
</footer>
Обратите внимание, что в вёрстке пропали идентификаторы и она стала чище. В этом модуле мы рассмотрим основные семантические теги на едином примере. От урока к уроку усложняя и дорабатывая страницу сайта.

Задание
Создайте разметку «шапки» и «подвала», используя новые семантические элементы HTML5



________________________________________________________________________________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________
33.

HTML: Шапка
Шапкой на сайте принято называть верхнюю область, в которой находятся контактные данные, меню, логотип. До появления стандарта HTML5 данную область просто размечали, используя обычный блок <div>, что не вносило «смысла».

В HTML5 для разметки шапки сайта используется парный тег <header>, внутри которого располагаются элементы.

<header>
  <img src="https://i.imgur.com/g64f8to.png" alt="Логотип"> <!-- Логотип сайта -->
  <div id="menu"> <!-- Меню -->
    <ul>
      <li><a href="/">Главная</a></li>
      <li><a href="/about">О нас</a></li>
      <li><a href="/contacts">Контакты</a></li>
    </ul>
  </div>
</header>
Тег <header> по своему поведению не отличается от тега <div> и не содержит отличных стандартных стилей, поэтому его можно использовать на любом сайте, не боясь нарушить внешний вид сайта.

Задание
Создайте разметку «шапки» сайта. Расположите внутри картинку и маркированный список из двух ссылок.

Для картинки используйте следующий код:

<img src="https://i.imgur.com/g64f8to.png" alt="Code Basics">
Полезное
Элемент header не является уникальным для страницы. Он может использоваться не только как шапка всей страницы, но и как шапка секции


________________________________________________________________________________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________
34.

HTML: Меню
Вернёмся к примеру из прошлых уроков:

<header>
  <img src="https://i.imgur.com/g64f8to.png" alt="Логотип"> <!-- Логотип сайта -->
  <div id="menu"> <!-- Меню -->
    <ul>
      <li><a href="/">Главная</a></li>
      <li><a href="/about">О нас</a></li>
      <li><a href="/contacts">Контакты</a></li>
    </ul>
  </div>
</header>
В нём меню сайта размечено с помощью обычного тега <div> с идентификатором menu. Как известно, такое обозначение работает для разработчиков, но не для браузеров. Они не понимают, что это меню, а не просто обёртка для списка.

Для создания полноценного меню используется парный тег <nav>, задача которого — разметить область страницы с основным меню. Также различные устройства для чтения с экрана, которыми пользуются люди со слабым зрением, используют этот тег, чтобы определить, стоит ли его отображать на странице.

Заменим <div id="menu"></div> на изученный тег <nav>:

<header>
  <img src="https://i.imgur.com/g64f8to.png" alt="Логотип"> <!-- Логотип сайта -->
  <nav> <!-- Меню -->
    <ul>
      <li><a href="/">Главная</a></li>
      <li><a href="/about">О нас</a></li>
      <li><a href="/contacts">Контакты</a></li>
    </ul>
  </nav>
</header>
Элемент nav, как и header не является уникальным для страницы. Его можно использовать для любого меню на странице, но есть несколько рекомендаций:

Нет необходимости оборачивать каждое меню в элемент nav. В основном такой областью указываются только основные меню. Дополнительные, такие как меню в футере, не оборачивают в тег <nav>, хотя это не запрещено.
Хороший пример дополнительного использования nav — навигация по текущей странице.
nav может содержать не только ссылки, но также и текст, в котором есть ссылки. Ориентируйтесь на здравый смысл. Если навигация является основной для страницы или всего сайта, то оберните её в тег <nav>.
Задание
Создайте разметку «шапки» сайта. Расположите внутри картинку и меню из двух элементов. Используйте тег <nav> и маркированный список.

Для картинки используйте следующий код:

<img src="https://i.imgur.com/g64f8to.png" alt="Code Basics">
Полезное
Оборачивайте в элемент навигации только основные меню сайта или отдельной страницы. Дополнительные меню не нуждаются в обёртке в тег <nav>

Навигация может быть в любой области страницы, а не только в шапке сайте


________________________________________________________________________________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________
35.

HTML: Уникальный контент страницы
Каждая HTML-страница содержит уникальный контент, который есть только на этой странице. Такая область размечается с помощью парного тега <main>. Это поможет устройствам для людей с ограниченными возможностями и поисковым роботам быстрее понять, где находится основной контент на странице.

Возьмём созданную нами шапку сайта и добавим к ней область с уникальным контентом:

<header>
  <img src="https://i.imgur.com/g64f8to.png" alt="Логотип"> <!-- Логотип сайта -->
  <nav> <!-- Меню -->
    <ul>
      <li><a href="/">Главная</a></li>
      <li><a href="/about">О нас</a></li>
      <li><a href="/contacts">Контакты</a></li>
    </ul>
  </nav>
</header>

<main>
  <!-- Основной контент страницы. Это может быть статья, описание услуги, данные на странице, контакты, форма заказа услуги -->
</main>
Элемент main является уникальным для одной страницы. Это отражает его семантическое назначение — разметка уникального контента. При оборачивании контента в main важно не включать в него неуникальные области:

Боковое меню
Общую навигацию для сайта
Общую шапку и футер сайта
Логотип
Размещайте в main именно текстовый/графический контент. Найти такой контент в шаблонах легко — он не дублируется на других страницах.

Внутри элемента main могут находиться свои области навигации, шапки, секции и другие элементы, которые будут изучены в этом модуле.

Задание
Создайте шапку сайта. Она состоит из 2-х элементов:

Логотип
Секция навигации. Внутри неё маркированный список из двух элементов
Добавьте секцию <main>. Внутри неё вставьте произвольный контент.

Для картинки используйте следующий код:

<img src="https://i.imgur.com/g64f8to.png" alt="Code Basics">
Полезное
main — уникальная секция, которая используется один раз на всю страницу

Для удобного поиска области, которая должна быть в main попробуйте, мысленно, оставить только те области, которые есть на каждой странице. Именно они не должны располагаться в области main


________________________________________________________________________________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________
36.

HTML: Секция
На больших страницах содержится много контента, который помещён друг в друга. Внутри шапки может быть отдельная область с правилами использования, внутри main секции с формой, дополнительной информацией и так далее. Они могут быть выделены с помощью тега <section>, значение которого — разметка связанных, по смыслу, блоков внутри секции.

Может звучать немного запутано, но представьте себе страницу музыкального портала, у которого есть области:

Информация об исполнителе
Популярные треки исполнителя
Дискография
Список ближайших концертов
Если это страница об исполнителе, то весь этот контент будет расположен внутри секции main, при этом стоит выделить и эти 4 секции. Они связаны с общим контентом, но являются самостоятельными единицами внутри него. Такая вёрстка может выглядеть следующим образом:

<main>
  <h1>Blue October</h1>
  <p>Американская группа из Хьюстона, играющая в стиле альтернативный рок</p>
  <section>
    <h2>Популярные треки</h2>
  </section>
  <section>
    <h2>Дискография</h2>
  </section>
  <section>
    <h2>Ближайшие концерты</h2>
  </section>
</main>
Если «вытащить эти секции» из тега <main>, то они потеряют свой смысл, так как без текста об исполнителе такая информация может быть непонятна. Такая информация напрямую связана с основным содержанием и не может существовать без него.

Добавим в учебный пример форму заказа услуги. Эта форма для заказа именно той услуги, которая представлена на странице, поэтому секция находится внутри области main и вынесена в отдельный тег <section>.

<header>
  <img src="https://i.imgur.com/g64f8to.png" alt="Логотип"> <!-- Логотип сайта -->
  <nav> <!-- Меню -->
    <ul>
      <li><a href="/">Главная</a></li>
      <li><a href="/about">О нас</a></li>
      <li><a href="/contacts">Контакты</a></li>
    </ul>
  </nav>
</header>

<main>
  <p>Основной контент страницы. Это может быть статья, описание услуги, данные на странице контакты</p>

  <section class="callback-form">
    <h2>Оставить заявку</h2>
    <form>
      <!-- Здесь форма заказа услуги -->
    </form>
  </section>
</main>
В большинстве случаев все области section имеют свой заголовок. Это хороший способ понять, когда нужно добавить область section.

Задание
Создайте шапку сайта. Она состоит из 2-х элементов:

Логотип
Секция навигации. Внутри неё маркированный список из двух элементов
Добавьте секцию <main>. Внутри создайте две секции с заголовками второго уровня

Для картинки используйте следующий код:

<img src="https://i.imgur.com/g64f8to.png" alt="Code Basics">
Полезное
Область section дополняет основной контент и не должна существовать сама по себе

Следите за тем, чтобы каждая секция имела свой заголовок


________________________________________________________________________________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________
37.

HTML: Самостоятельная секция
Помимо тега <section>, для обозначения секции используется тег <article>. Он предназначается для разметки секции, которая может быть использована самостоятельно и не привязана структурно к конкретной странице. Например, блок с курсом валют, погода, превью новости или статьи. Данные блоки хоть и могут напрямую касаться текущей страницы, но они представляют собой самостоятельную единицу, которая не потеряет смысл, если взглянуть на неё отдельно от контекста.

В связи с тем, что <article> может быть использован самостоятельно, он обязательно внутри себя содержит заголовок.

<header>
  <img src="https://i.imgur.com/g64f8to.png" alt="Логотип"> <!-- Логотип сайта -->
  <nav> <!-- Меню -->
    <ul>
      <li><a href="/">Главная</a></li>
      <li><a href="/about">О нас</a></li>
      <li><a href="/contacts">Контакты</a></li>
    </ul>
  </nav>
</header>

<main>
  <p>Основной контент страницы. Это может быть статья, описание услуги, данные на странице контакты</p>

  <section class="callback-form">
    <h2>Оставить заявку</h2>
    <form>
      <!-- Здесь форма заказа услуги -->
    </form>
  </section>

  <section class="more">
    <h2>Читайте также</h2>
    <article class="article-block">
      <h3>Услуга 2</h3>
      <p>Описание новой услуги</p>
      <a href="#">Ссылка на услугу</a>
    </article>

    <article class="article-block">
      <h3>Услуга 3</h3>
      <p>Описание новой услуги</p>
      <a href="#">Ссылка на услугу</a>
    </article>

    <article class="article-block">
      <h3>Услуга 4</h3>
      <p>Описание новой услуги</p>
      <a href="#">Ссылка на услугу</a>
    </article>
  </section>
</main>
Обратите внимание, что сами <article> обёрнуты в <section>, так как эта секция напрямую связана с текущей страницей и показывает похожие услуги. А услуги размечены с помощью <article>. Они могут быть «выдернуты» из контекста, и всё равно будет понятно, что это описание конкретной услуги, которую мы предлагаем.

Задание
Создайте шапку сайта. Она состоит из 2-х элементов:

Логотип
Секция навигации. Внутри неё маркированный список из двух элементов
Добавьте секцию <main>. Внутри создайте секцию с заголовком в теге <h2> и два блока с описанием новых услуг.

Не забудьте, что внутри тега <article> обязательно содержится заголовок. Сами заголовки внутри <article> разметьте тегом <h3>.

Полезное
Если область не потеряет свой смысл вне страницы, то её можно обернуть в <article>

Все области article обязательно имеют заголовок

________________________________________________________________________________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________
38.

HTML: Боковая панель
Большинство сайтов имеют боковую панель или, как её ещё называют, сайдбар. Он служит для отображения информации, которая дополняет основной текст, но не является обязательной. Чаще всего это меню раздела, список определений из статьи, виджеты и т.д.

Для того чтобы корректно разметить такую область, существует тег <aside>, внутри которого и располагается наша боковая панель. Добавим в пример из прошлого урока боковую панель с дополнительным меню.

<header>
  <img src="https://i.imgur.com/g64f8to.png" alt="Логотип"> <!-- Логотип сайта -->
  <nav> <!-- Меню -->
    <ul>
      <li><a href="/">Главная</a></li>
      <li><a href="/about">О нас</a></li>
      <li><a href="/contacts">Контакты</a></li>
    </ul>
  </nav>
</header>

<aside> <!-- Боковая панель (сайдбар) -->
  <nav> <!-- Дополнительное меню страницы -->
    <ul>
      <li><a href="/service-1/">Услуга 1</a></li>
      <li><a href="/service-2/">Услуга 2</a></li>
      <li><a href="/service-3/">Услуга 3</a></li>
    </ul>
  </nav>
</aside>

<main>
  <p>Основной контент страницы. Это может быть статья, описание услуги, данные на странице контакты</p>

  <section class="callback-form">
    <h2>Оставить заявку</h2>
    <form>
      <!-- Здесь форма заказа услуги -->
    </form>
  </section>

  <section class="more">
    <h2>Читайте также</h2>
    <article class="article-block">
      <h3>Услуга 2</h3>
      <p>Описание новой услуги</p>
      <a href="#">Ссылка на услугу</a>
    </article>

    <article class="article-block">
      <h3>Услуга 3</h3>
      <p>Описание новой услуги</p>
      <a href="#">Ссылка на услугу</a>
    </article>

    <article class="article-block">
      <h3>Услуга 4</h3>
      <p>Описание новой услуги</p>
      <a href="#">Ссылка на услугу</a>
    </article>
  </section>
</main>
Обратите внимание, что <aside> содержится вне тега <main>. Этот контент не обязан быть уникальным на каждой странице. Он может быть уникальным для каждого конкретного раздела (если речь идёт, например, о меню). Если боковая панель уникальна для каждой страницы, то она должна быть расположена внутри тега <main>.

Задание
Создайте шапку сайта. Она состоит из 2-х элементов:

Логотип
Секция навигации. Внутри неё маркированный список из двух элементов
Добавьте секцию <main>. Внутри создайте секцию с заголовком в теге <h2>. Внутри секции создайте два блока с описанием новых услуг. Не забудьте, что внутри тега <article> обязательно содержится заголовок. Сами заголовки внутри <article> разметьте тегом <h3>.

Добавьте боковую панель. Она является уникальной для каждой страницы и содержит текст, относящийся только к этой странице. Внутри панели вставьте произвольный текст. Подумайте, где именно будет расположена эта область

Для картинки используйте следующий код:

<img src="https://i.imgur.com/g64f8to.png" alt="Code Basics">
Полезное
Хоть мы и говорили про боковую панель, но aside обозначает дополняющую область. При этом, зачастую, визуально она выглядит как боковая панель

________________________________________________________________________________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________
39.

HTML: Семантический WEB
С ростом количества страниц в интернете появилась проблема прочтения информации не только человеком, но и роботами. Если человек отделяет смысловые блоки друг от друга, видит расположение и может быстро найти нужный ему участок страницы, то робот видит всю страницу в виде текста и не может самостоятельно разбить её для анализа смысла информации.

Эта проблема остро заявила о себе с начала нового тысячелетия, когда количество страниц в интернете неуклонно стало расти, и поисковые роботы (Google, Bing, Yandex, Yahoo) имели малые возможности для корректного анализа каждой страницы в интернете, из-за чего веб-мастера специально указывали популярные, на то время, ключевые слова на сайте, чтобы подняться в результатах поиска.

Сейчас появились возможности показать роботам смысл (семантику) HTML-страницы. Благодаря этому при запросе в поисковую систему можно увидеть не только список ссылок на сайты, но и конкретную информацию, например рецепт пирога, маршрут до нужной улицы, контакты организации.

Правильная семантика также позволяет устройствам правильно воспринимать части веб-сайта. Например, режим чтения в телефонах старается отбросить не связанные с контентом блоки, чтобы оставить только смысловую часть.

Стандартное отображение урока на Code Basics и отображение в режиме чтения

Существуют две реализации семантического веба:

На основе микроразметки. Это специальные атрибуты, которые добавляются в HTML-разметку и помогают роботам найти нужную информацию. Микроразметка используется чаще всего, так как имеет множество возможностей и полей для разметки

Используя стандарт HTML5. В стандарте появилось множество тегов, которые помогают роботам анализировать информацию, находить логические связи между блоками (или понимать, что их нет), искать необходимые части для корректного отображения на устройствах для чтения

Хотя стандарт HTML5 и не вытеснил микроразметку, ввиду меньших возможностей, его использование вместе с микроразметкой позволяет роботам корректнее обрабатывать сайт и находить в нём логические блоки.

Пример семантической разметки на HTML5
<main> <!-- Определение основной части страницы -->
  <article> <!-- Определение статьи -->
    <header> <!-- Заголовочная информация статьи -->
      <h1>Название статьи</h1>
      <img src="https://i.imgur.com/g64f8to.png" alt="Заголовок статьи">
    </header>

    <p>Текст нашей статьи</p>

    <footer> <!-- «Подвал статьи» с указанием автора и даты -->
      <address> <!-- Информация об авторе статьи -->
        <p>Автор: Дмитрий</p>
        <p>Email: dmitry@test.test</p>
      </address>
      <time datetime="2019-07-27">27 июля</time> <!-- Дата написания статьи -->
    </footer>
  </article>
</main>
Задание
Создайте разметку статьи, как в примере выше. Данные внутри могут быть произвольными

________________________________________________________________________________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________
40.
HTML: Микроразметка
Говоря о семантике, был затронут такой формат разметки, как микроразметка, используемая поисковыми роботами для анализа информации на странице. Правильная разметка страницы с помощью микроразметки помогает выводить в результатах поискового запроса не только ссылку на сайт и описание, но и дополнительную информацию:

Название организации
Время работы
Адрес
Номер телефона
Микроразметка — инструмент, который реализуется с помощью дополнительных атрибутов HTML-тегов.

Schema.org
Разработчики создали несколько вариантов микроразметки, наиболее распространённым из которых является Schema.org с широким выбором «словарей» для описания информации на странице.

Словарь — это набор правил, по которым описываются блоки на странице. Сеансы фильмов в кинотеатре, информация отдела продаж, цены на товары, отзывы о статье — всё это представлено в небольших словарях.

Действия для создания микроразметки:

Выбор словаря. Узнать о поддержке тех или иных словарей поисковой системой можно с помощью документации. Для поисковой системы Яндекс доступные словари указаны здесь
Определение блока, который будет размечаться. Это может быть не только блок, а вся страница сайта
Выделение информации. На примере разметки контактной информации это: название организации, телефон, email, адрес
Указание атрибутов в зависимости от типа информации и словаря
Полную инструкцию по микроразметке дать в одном уроке невозможно. Это большая тема, со множеством различных нюансов. По мере получения опыта вы научитесь быстро определять необходимую информацию и размечать её. При простой схеме работы, микроразметка даёт огромные возможности — как в плане визуальной выдачи информации в поисковой системе, так и для поискового продвижения.

Микроразметка контактов
Для примера возьмём контактные данные вымышленной компании «Прауд», и разметим контакты, используя Schema.org. Изначально блок с контактами выглядит следующим образом:

<section>
  <h1>Компания «Прауд»</h1>
  <p>Адрес: г.Мотино, улица Строителей, дом 6</p>
  <p>Телефон: 8 (8765) 333-00-00</p>
  <p>Email: info@proud-company.test</p>
</section>
Первое, нужно выбрать словарь. Поисковая система Яндекс для этого предлагает несколько вариантов. Возьмём словарь Organization. Полное описание этого словаря можно найти на сайте https://schema.org/.

В уроке не ставится цель научить полностью размечать данные. Цель урока — показать пример микроразметки

Для того чтобы подсказать поисковой системе, что данные размечены словарём, указывается два атрибута:

itemscope — указатель на то, что блок — единая сущность, и данные в нем связаны. Указывается только у главного блока и не имеет своего значения
itemtype — указывает на то, какой словарь будет использоваться. Например, для описания контактов выбран словарь Organization. Полный вид атрибута: itemtype="http://schema.org/Organization"
<section itemscope itemtype="http://schema.org/Organization">
  <h1>Компания «Прауд»</h1>
  <p>Адрес: г.Мотино, улица Строителей, дом 6</p>
  <p>Телефон: 8 (8765) 333-00-00</p>
  <p>Email: info@proud-company.test</p>
</section>
Теперь поисковая система будет знать, что внутри этого блока информация об организации. Приступим к разметке адреса. Schema.org позволяет отдельно указывать улицу, дом, строение и так далее, но мы обобщим это и используем только одно значение itemprop="address", чтобы обозначить адрес предприятия. Обратите внимание, что элементы разметки указываются с помощью атрибута itemprop.

<section itemscope itemtype="http://schema.org/Organization">
  <h1>Компания «Прауд»</h1>
  <p>Адрес: <span itemprop="address">г.Мотино, улица Строителей, дом 6</span></p>
  <p>Телефон: 8 (8765) 333-00-00</p>
  <p>Email: info@proud-company.test</p>
</section>
По аналогии с адресом разметим остальные данные: название, телефон, email. Для каждого из них есть своё значение атрибута itemprop. Обратите внимание, что размечаются только данные, оставляя за «бортом» название поля. Для этого нужные данные оборачивают в <span> и для него указывают атрибут.

<section itemscope itemtype="http://schema.org/Organization">
  <h1 itemprop="name">Компания «Прауд»</h1>
  <p>Адрес: <span itemprop="address">г.Мотино, улица Строителей, дом 6</span></p>
  <p>Телефон: <span itemprop="telephone">8 (8765) 333-00-00</span></p>
  <p>Email: <span itemprop="email">info@proud-company.test</span></p>
</section>
Для проверки корректности микроразметки можно пользоваться инструментами популярных поисковых систем:

Google
Yandex
Попробуйте вставить тестовый пример в эти инструменты и взгляните на результат. Можете попробовать «сломать» микроразметку и посмотреть на вывод ошибок.

Задание
Создайте разметку организации, в которой укажите:

Название организации
Email организации
Теги используются на своё усмотрение. Вся семантика строится на уровне микроразметки. В качестве словаря используйте http://schema.org/Organization


________________________________________________________________________________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________
41.

HTML: Ошибки в HTML-разметке
При разметке контента на странице часто возникают проблемы: забыли закрыть тег, вложили элементы, которые вкладывать нельзя, забыли указать обязательные теги.

<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <title>Примеры ошибок</title>
</head>
<body>
  <p>Текст</span> <!-- Закрыли не тот тег -->
  <img src="https://i.imgur.com/g64f8to.png"> <!-- Не указали обязательный атрибут alt -->
</body>
</html>
В большинстве случаев такие ситуации не страшны. Разработчики браузеров внедряют автоматические проверки кода на ошибки, которые могут привести к нарушению отображения разметки, и при их наличии пытаются автоматически исправить проблему. При простых ошибках такой подход оправдан и позволяет разработчикам не беспокоиться о забытом теге <html> или <body>. В сложных же ситуациях такие ошибки могут быть трудно уловимы, и зачастую разработчики долго сидят над кодом и ищут их.

Для решения таких проблем созданы специальные валидаторы HTML-разметки, которые автоматически проверяют код на ошибки. Можно указать ему ссылку на страницу или готовый фрагмент HTML-разметки, после чего валидатор выдаст список предупреждений и ошибок. На примере выше валидатор покажет следующие ошибки:

Валидатор показывает ошибки разметки

Отсутствие открывающего тега <span>, который сейчас оказался закрыт. Обычно это означает, что мы или случайно закрыли не тот тег, как в данном случае, или открыли не тот. Современные редакторы кода помогают избежать этой ошибки, так как они автоматически закрывают теги при их создании.
Отсутствие обязательного атрибута alt у тега <img>.
Распространённым валидатором является онлайн сервис от W3C, его можно найти по ссылке https://validator.w3.org/. Он поддерживает все стандарты HTML, поэтому важно не забывать проверять разметку с его помощью.

Задание
Исправьте ошибки в примере кода из теории. В тексте предполагалось использование тега <p>, а не <span>. Вставьте две исправленные строчки в редактор.
________________________________________________________________________________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________
